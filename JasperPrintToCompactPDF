import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import org.apache.pdfbox.pdmodel.*;
import org.apache.pdfbox.pdmodel.common.PDRectangle;
import org.apache.pdfbox.pdmodel.graphics.image.JPEGFactory;

import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;

public class JasperPrintToCompactPDF {

    private static final int MAX_PIXELS = 8000;       // Max allowed width/height in pixels
    private static final float DEFAULT_DPI = 100f;    // Default rendering DPI
    private static final float MIN_DPI = 30f;         // Minimum allowed DPI
    private static final float MAX_DPI = 150f;        // Don’t render above this DPI
    private static final float JPEG_QUALITY = 0.6f;   // Compression ratio (0.5–0.8)

    public static byte[] convert(JasperPrint jasperPrint) throws Exception {
        if (jasperPrint == null)
            throw new IllegalArgumentException("jasperPrint cannot be null");

        try (PDDocument document = new PDDocument();
             ByteArrayOutputStream baos = new ByteArrayOutputStream()) {

            int pageCount = jasperPrint.getPages().size();

            for (int i = 0; i < pageCount; i++) {
                // ✅ Get Jasper page size safely
                double pageWidthPts = Math.max(1, jasperPrint.getPageWidth());
                double pageHeightPts = Math.max(1, jasperPrint.getPageHeight());

                // ✅ Calculate safe DPI so width/height never exceed MAX_PIXELS
                double dpiW = (MAX_PIXELS * 72.0) / pageWidthPts;
                double dpiH = (MAX_PIXELS * 72.0) / pageHeightPts;
                float safeDpi = (float) Math.min(DEFAULT_DPI, Math.min(dpiW, dpiH));
                if (safeDpi > MAX_DPI) safeDpi = MAX_DPI;
                if (safeDpi < MIN_DPI) safeDpi = MIN_DPI;

                // ✅ Render page safely
                BufferedImage pageImage = JasperPrintManager.printPageToImage(jasperPrint, i, safeDpi);

                // ✅ If still huge (Jasper sometimes over-renders), downscale
                pageImage = resizeIfTooLarge(pageImage, MAX_PIXELS, MAX_PIXELS);

                // ✅ Compute PDF page size from pixels and DPI
                float widthPt = (float) ((pageImage.getWidth() * 72.0) / safeDpi);
                float heightPt = (float) ((pageImage.getHeight() * 72.0) / safeDpi);

                if (widthPt <= 0 || heightPt <= 0) { // safety fallback
                    widthPt = PDRectangle.A4.getWidth();
                    heightPt = PDRectangle.A4.getHeight();
                }

                PDPage page = new PDPage(new PDRectangle(widthPt, heightPt));
                document.addPage(page);

                // ✅ Add compressed JPEG image to PDF
                var pdImage = JPEGFactory.createFromImage(document, pageImage, JPEG_QUALITY);
                try (PDPageContentStream cs = new PDPageContentStream(document, page)) {
                    cs.drawImage(pdImage, 0, 0, widthPt, heightPt);
                }

                pageImage.flush();
            }

            document.save(baos);
            return baos.toByteArray();
        }
    }

    /** Downscale image only if it exceeds allowed dimensions */
    private static BufferedImage resizeIfTooLarge(BufferedImage src, int maxW, int maxH) {
        int w = src.getWidth();
        int h = src.getHeight();

        if (w <= 0 || h <= 0)
            return new BufferedImage(1, 1, BufferedImage.TYPE_INT_RGB); // prevent negative array

        if (w <= maxW && h <= maxH)
            return src;

        double scale = Math.min((double) maxW / w, (double) maxH / h);
        int newW = Math.max(1, (int) (w * scale));
        int newH = Math.max(1, (int) (h * scale));

        BufferedImage resized = new BufferedImage(newW, newH, BufferedImage.TYPE_INT_RGB);
        Graphics2D g = resized.createGraphics();
        g.setRenderingHint(RenderingHints.KEY_INTERPOLATION, RenderingHints.VALUE_INTERPOLATION_BILINEAR);
        g.setBackground(Color.WHITE);
        g.clearRect(0, 0, newW, newH);
        g.drawImage(src, 0, 0, newW, newH, null);
        g.dispose();

        return resized;
    }
}
